{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,EAZS,SAAEC,GACjBA,GAAeA,aAAuBC,UACvC,6BAAuBC,MAAM,YAAoD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,QAC7DJ,EAAQH,GACRI,EAAQJ,GACRK,EAAQL,GACRM,EAAQN,GACRO,EAASP,O,6BC4BNQ,EAhCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAEpB,EAAsCC,mBAAU,IAAhD,mBAAQC,EAAR,KAAoBC,EAApB,KAeA,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAES,GAAF,OAAcP,GAAd,mBAA6BO,OAC5CN,EAAe,MAKnB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCMjBG,EAdF,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAWH,GADrD,+DAEOI,MAAOF,GAFd,cAENG,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAK,SAAEC,GAAF,YAAa,CAChCC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR1B,kBAWLM,GAXK,4CAAH,sDCwBEO,EArBM,SAAEf,GACnB,MAA4Bd,mBAAU,CAClCqB,KAAM,GACNS,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAiBA,OAZAC,qBAAW,WACPpB,EAASC,GACJtB,MAAM,SAAE0C,GAELF,EAAU,CACNX,KAAMa,EACNJ,SAAS,SAItB,CAAEhB,IAEEiB,GCZII,EAPK,SAAC,GAAD,IAAIT,EAAJ,EAAIA,MAAOV,EAAX,EAAWA,IAAX,OAChB,sBAAKoB,UAAU,yCAAf,UACI,qBAAKC,IAAMrB,EAAMsB,IAAMZ,IACvB,kCAAMA,EAAN,WC4BOa,EA5BC,SAAC,GAAoB,IAAjBzB,EAAgB,EAAhBA,SAEhB,EAAkCe,EAAcf,GAAxCgB,EAAR,EAAQA,QAAeH,EAAvB,EAAiBN,KAEjB,OACI,qCACI,6BAAMP,IAEJgB,GAAW,mBAAGM,UAAU,6CAAb,qBAEb,qBAAKA,UAAU,8CAAf,SAEQT,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAESA,GADCA,EAAIC,aCevBe,EA9BM,WACjB,MAAsCxC,mBAAU,CAAE,cAAlD,mBAAQyC,EAAR,KAAoB1C,EAApB,KAQA,OACI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ0C,EAAWlB,KAAK,SAAET,GAAF,OACZ,cAAC,EAAD,CAEIA,SAAWA,GADLA,YChBlC4B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAgB,SAM7BxD,M","file":"static/js/main.336e7b21.chunk.js","sourcesContent":["const reportWebVitals = ( onPerfEntry ) => {\n    if ( onPerfEntry && onPerfEntry instanceof Function ) {\n        import( 'web-vitals' ).then( ( { getCLS, getFID, getFCP, getLCP, getTTFB } ) => {\n            getCLS( onPerfEntry );\n            getFID( onPerfEntry );\n            getFCP( onPerfEntry );\n            getLCP( onPerfEntry );\n            getTTFB( onPerfEntry );\n        } );\n    }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategories } ) => {\n\n    const [ inputValue, setInputValue ] = useState( '' );\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( ( cats ) => [ inputValue, ...cats ] );\n            setInputValue( '' );\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=zqiGgVrnCYx1CS7t96xSGDvyI69lOtba`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( ( img ) => ( {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n    } ) );\n\n    return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = ( category ) => {\n    const [ state, setstate ] = useState( {\n        data: [],\n        loading: true,\n    } );\n\n    useEffect( () => {\n        getGifs( category )\n            .then( ( imgs ) => {\n\n                setstate( {\n                    data: imgs,\n                    loading: false,\n                } );\n\n            } );\n    }, [ category ] );\n\n    return state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\n\nconst GifGridItem = ( { title, url } ) => (\n    <div className=\"card animate__animated animate__fadeIn\">\n        <img src={ url } alt={ title } />\n        <p> { title } </p>\n    </div>\n);\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ( { category } ) => {\n\n    const { loading, data: images } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && <p className=\"card-grid animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid animate__animated animate__fadeIn\">\n                {\n                    images.map( ( img ) => (\n                        <GifGridItem\n                            key={ img.id }\n                            { ...img }\n                        />\n                    ) )\n                }\n            </div>\n        </>\n    );\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [ categories, setCategories ] = useState( [ 'One Punch' ] );\n\n    // const handleAdd = () => {\n    //     // const addElement = 'Attack of Titans';\n    //     setCategories( [ ...categories, 'Attack of Titans' ] );\n    //     // setCategories( cats => [ ...cats, 'Attack of Titans' ] ); Otra forma de hacerlo\n    // }\n\n    return (\n        <>\n            <h2>GifExpert</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            <ol>\n                {\n                    categories.map( ( category ) => (\n                        <GifGrid\n                            key={ category }\n                            category={ category }\n                        />\n                    ) )\n                }\n            </ol>\n\n        </>\n    );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById( 'root' ),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// Crear componente GifExpertApp\n// <h2>GifExpert</h2>\n// <hr />\n"],"sourceRoot":""}